#include <iostream>
#include <bitset>
#include <conio.h>
#include <fstream>
using namespace std;


class DES
{
public:  

    DES() {
        file.open("log.md");
        file << "# Log \r\r **This is the log generated by DES Algorithm** \r\r";
    }
    //encryption algorithm
    void encrypt(string plainText,string key1)
    {
        file << "## STEP 1: \r\r Create 16 subkeys, each of which is 48-bits long. \r\r";
        //bitset<64> key = 0b000100110011010001010111011110011001101110111100110111111111001;
        bitset<64> key =   0b0001001100110100010101110111100110011011101111001101111111110001;

        file << "64 bit key: \r\r";
        print<64>(key,64,8);
        
        //Covert to 56 bit key
        bitset<56> k_56 =  pc1(key);
        file << "56 bit key: \r\r" << endl;
        print<56>(k_56,56,7);
        file << "\r\r";

        //Shifting the keys
        bitset<28>c[17],d[17];

        for(int i = 0; i < 28; i++)
        {
            d[0][i] = k_56[i];
            c[0][i] = k_56[28+i];
        }

        c[1] = circularShift<28>(c[0],1);
        d[1] = circularShift<28>(d[0],1);
        int j = 0;
        for(int i = 2; i <= 16; i++)
        {
            int num = 2;
            if(j % 7 == 0)
                num = 1;
            c[i] = circularShift<28>(c[i-1],num);
            d[i] = circularShift<28>(d[i-1],num);
            j++;

        }

        file << "Shifting 56 bit key for 16 rounds \r\r";
         for(int i = 0; i <= 16; i++) {
             file << "c" << i << " & d" <<i << " : \r\r ";
             print<28>(c[i],28,7);
             print<28>(d[i],28,7);
         }


      
        file << "Generating 16 subkeys of size 48 \r\r";
        bitset<48> k_48[17];
        for(int i = 1; i <=16; i++) {
            k_48[i] = pc2( mergeTwo<28>(c[i], d[i]) );
        }


        for(int i = 1; i <=16; i++) {
             file << "K" << i << " : \r\r ";
            print<48>(k_48[i],48,6);
        }

    }




    //PC-1 Table
    bitset<56> pc1(bitset<64> key)
    {
        const int pc1Arr[56] =
        {
            57, 49,  41, 33,  25,  17,  9,
            1, 58,  50, 42,  34,  26, 18,
            10,  2,  59, 51,  43,  35, 27,
            19, 11,   3, 60,  52,  44, 36,
            63, 55,  47, 39,  31,  23, 15,
            7, 62,  54, 46,  38,  30, 22,
            14,  6,  61, 53,  45,  37, 29,
            21, 13,   5, 28,  20,  12,  4
        };
        bitset<56> bit56key;
        int count1 = 0;
        for(int i = 55; i >= 0; i--)
        {

            bit56key[i] = key[64 - pc1Arr[count1++]];


        }
        return bit56key;
    }


    //PC-2 Table
    bitset<48> pc2(bitset<56> key)
    {
        const int pc2Arr[48] =
        {
            14, 17,  11, 24,  1, 5,
            3, 28,  15,  6, 21, 10,
            23, 19,  12,  4, 26, 8,
            16,  7,  27, 20, 13, 2,
            41, 52,  31, 37, 47, 55,
            30, 40,  51, 45, 33, 48,
            44, 49,  39, 56, 34, 53,
            46, 42,  50, 36, 29, 32
        };
        bitset<48> bit48key;
        int count1 = 0;
        for(int i = 47; i >= 0; i--)
        {

            bit48key[i] = key[56 - pc2Arr[count1++]];


        }
        return bit48key;
    }

    //Circular Shift
    template <int T>
    bitset<T> circularShift(bitset<T> a,int num)
    {

        int overflow[num];
        for(int i = 0; i < num; i++)
        {
            overflow[i] = a[T-1-i];
        }

        a = a << num;
        int count1 = 0;
        for(int i = num-1; i >= 0; i--)
        {
            a[i] = overflow[count1++];
        }
        return a;
    }


    //Merge key parts
    template <int T>
    bitset<2*T> mergeTwo(bitset<T> a,bitset<T> b) {
        bitset<2*T> key;

        for(int i = 0; i < 2*T; i++) {
            if(i < T) {
                key[i] = b[i];
            } else
                key[i] = a[i-T];
        }

        return key;

    }

    template <int T>
    void print(bitset<T> a,int arrLength, int blockSize) {
        file << "\t";
        for(int i = arrLength - 1; i >= 0; i--)
        {
             file << a[i] ;
            if(i % (blockSize) == 0)
                file << " ";
           
        }
        file << "\r";

    }


private:
    ofstream file;

};




int main()
{


    DES a;
    a.encrypt("sds","sds");

    return 0;
}
